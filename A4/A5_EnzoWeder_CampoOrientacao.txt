1. 

pkg load image

blockSize = 5;
img = imread("1_1.tif");
resized = round(size(img) / blockSize);


orientations = zeros(resized);
coherence = zeros(resized);


Gxy = zeros(resized);
Gxx = zeros(resized);
Gyy = zeros(resized);


k=1;
l=1;
xBound = size(img,1)-blockSize;
yBound = size(img,2)-blockSize;

for i = 1:blockSize:xBound
  for j = 1:blockSize:yBound
    [gradX, gradY] = imgradientxy(img(i:(i - 1 + blockSize), j:(j+blockSize-1)));
    Gxy(k,l) = sum(sum(gradX .* gradY));
    Gxx(k,l) = sum(sum(gradX .* gradX));
    Gyy(k,l) = sum(sum(gradY .* gradY));
    orientations(k,l) = 90 + 0.5 * rad2deg( atan2(2*Gxy(k,l), Gxx(k,l) * Gxy(k,l)));
    coherence(k,l) = (sqrt(((Gxx(k,l)-Gyy(k,l)) ^ 2) + (4 * (Gxy(k,l)^2))) / (Gxx(k,l) + Gyy(k,l)));

    k = 1 + ((i-1) / blockSize);
    l = 1 + ((j-1) / blockSize);
  endfor
endfor


2. Os resultados se apresentam muito divergentes do que seria esperado.

3. Sim, o aumento de contraste em pontos da imagem seria benéfico para limitação de bordas.

4. Antes do início dos cálculos de gradiente, a presença de ruído, principalmente por se tratar de uma imagem de um objeto pequeno que carrega muitos detalhes, seria extremamente prejudicial para uma análise concreta.

5. O código ao todo apresenta uma quebra de expectativa em relação aos resultados esperados.

6. Os resultados diferem, e muito, do que seria esperado. Sem um resultado de exemplo palpável para guiar o levantamento de informações sobre direções é difícil ser conclusivo sobre, porém creio que a maneira que os resultados retornados pela função imgradientxy não estão sendo tratados devidamente antes de serem trabalhados. Para resolução seria necessário um ambiente de testagem com ciência das saídas esperadas para tratamento do código.